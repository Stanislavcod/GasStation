// <auto-generated />
using System;
using GasStationApp;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GasStationApp.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EquipmentPost", b =>
                {
                    b.Property<int>("EquipmentsId")
                        .HasColumnType("int");

                    b.Property<int>("PostsId")
                        .HasColumnType("int");

                    b.HasKey("EquipmentsId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("EquipmentPost");
                });

            modelBuilder.Entity("FuelFuelPump", b =>
                {
                    b.Property<int>("FuelPumpsId")
                        .HasColumnType("int");

                    b.Property<int>("FuelsId")
                        .HasColumnType("int");

                    b.HasKey("FuelPumpsId", "FuelsId");

                    b.HasIndex("FuelsId");

                    b.ToTable("FuelFuelPump");
                });

            modelBuilder.Entity("GasStationApp.Entities.CreditCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CVV")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("GasStationApp.Entities.Departament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departaments");
                });

            modelBuilder.Entity("GasStationApp.Entities.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("GasStationApp.Entities.Fuel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("TypeOfFuel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fuels");
                });

            modelBuilder.Entity("GasStationApp.Entities.FuelPump", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Capacity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("FuelPumps");
                });

            modelBuilder.Entity("GasStationApp.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("FuelId")
                        .HasColumnType("int");

                    b.Property<int?>("FuelPumpId")
                        .HasColumnType("int");

                    b.Property<double?>("FuelQuantity")
                        .HasColumnType("float");

                    b.Property<DateTime?>("OrderTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID")
                        .IsUnique();

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FuelId");

                    b.HasIndex("FuelPumpId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GasStationApp.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("GasStationApp.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("GasStationApp.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Desriptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.Property<int>("OrdersId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("OrdersId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("GasStationApp.Entities.Customer", b =>
                {
                    b.HasBaseType("GasStationApp.Entities.Person");

                    b.Property<int>("CreditCardId")
                        .HasColumnType("int");

                    b.HasIndex("CreditCardId")
                        .IsUnique()
                        .HasFilter("[CreditCardId] IS NOT NULL");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("GasStationApp.Entities.Employee", b =>
                {
                    b.HasBaseType("GasStationApp.Entities.Person");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PostId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 22,
                            Name = "Tom",
                            PhoneNumber = "+375298875845",
                            Salary = 1500m,
                            SurName = "Terakov"
                        });
                });

            modelBuilder.Entity("GasStationApp.Entities.Manager", b =>
                {
                    b.HasBaseType("GasStationApp.Entities.Person");

                    b.Property<int?>("DepartamentId")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DepartamentId")
                        .IsUnique()
                        .HasFilter("[DepartamentId] IS NOT NULL");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("EquipmentPost", b =>
                {
                    b.HasOne("GasStationApp.Entities.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GasStationApp.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FuelFuelPump", b =>
                {
                    b.HasOne("GasStationApp.Entities.FuelPump", null)
                        .WithMany()
                        .HasForeignKey("FuelPumpsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GasStationApp.Entities.Fuel", null)
                        .WithMany()
                        .HasForeignKey("FuelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GasStationApp.Entities.Order", b =>
                {
                    b.HasOne("GasStationApp.Entities.Customer", "Customer")
                        .WithOne("Order")
                        .HasForeignKey("GasStationApp.Entities.Order", "CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GasStationApp.Entities.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GasStationApp.Entities.Fuel", "Fuel")
                        .WithMany("Orders")
                        .HasForeignKey("FuelId");

                    b.HasOne("GasStationApp.Entities.FuelPump", "FuelPump")
                        .WithMany("Orders")
                        .HasForeignKey("FuelPumpId");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Fuel");

                    b.Navigation("FuelPump");
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.HasOne("GasStationApp.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GasStationApp.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GasStationApp.Entities.Customer", b =>
                {
                    b.HasOne("GasStationApp.Entities.CreditCard", "CreditCard")
                        .WithOne("Customer")
                        .HasForeignKey("GasStationApp.Entities.Customer", "CreditCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GasStationApp.Entities.Person", null)
                        .WithOne()
                        .HasForeignKey("GasStationApp.Entities.Customer", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("CreditCard");
                });

            modelBuilder.Entity("GasStationApp.Entities.Employee", b =>
                {
                    b.HasOne("GasStationApp.Entities.Person", null)
                        .WithOne()
                        .HasForeignKey("GasStationApp.Entities.Employee", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("GasStationApp.Entities.Manager", "Manager")
                        .WithMany("Employees")
                        .HasForeignKey("ManagerId");

                    b.HasOne("GasStationApp.Entities.Post", "Post")
                        .WithMany("Employees")
                        .HasForeignKey("PostId");

                    b.Navigation("Manager");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("GasStationApp.Entities.Manager", b =>
                {
                    b.HasOne("GasStationApp.Entities.Departament", "Departament")
                        .WithOne("Manager")
                        .HasForeignKey("GasStationApp.Entities.Manager", "DepartamentId");

                    b.HasOne("GasStationApp.Entities.Person", null)
                        .WithOne()
                        .HasForeignKey("GasStationApp.Entities.Manager", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Departament");
                });

            modelBuilder.Entity("GasStationApp.Entities.CreditCard", b =>
                {
                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GasStationApp.Entities.Departament", b =>
                {
                    b.Navigation("Manager");
                });

            modelBuilder.Entity("GasStationApp.Entities.Fuel", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("GasStationApp.Entities.FuelPump", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("GasStationApp.Entities.Post", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("GasStationApp.Entities.Customer", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("GasStationApp.Entities.Employee", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("GasStationApp.Entities.Manager", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
